/*
 * Move2Kube API
 * This is a documentation of the Move2Kube REST API. All API calls expect the `Authorization: Bearer <access-token>` HTTP header unless specified otherwise. The access token can be obtained in the same way as OAuth 2.0 using the token endpoint in the admin section. 
 *
 * The version of the OpenAPI document: v1.0.0
 * Contact: move2kube-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.parodos.move2kube.api;

import dev.parodos.move2kube.ApiException;
import dev.parodos.move2kube.client.model.CreateRole201Response;
import dev.parodos.move2kube.client.model.Error;
import dev.parodos.move2kube.client.model.Role;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.Assert;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RolesApi
 */
@Ignore
public class RolesApiTest {

    private final RolesApi api = new RolesApi();

    /**
     * Create a new role.
     *
     * Create a new role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRoleTest() throws ApiException {
        Role body = null;
        CreateRole201Response response = api.createRole(body);

        // TODO: test validations
    }
    /**
     * Delete an existing role
     *
     * Delete an existing role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRoleTest() throws ApiException {
        String roleId = null;
        api.deleteRole(roleId);

        // TODO: test validations
    }
    /**
     * Get the role with the given ID.
     *
     * Get the role with the given ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRoleTest() throws ApiException {
        String roleId = null;
        Role response = api.getRole(roleId);

        // TODO: test validations
    }
    /**
     * Get all the roles.
     *
     * Get all the roles.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRolesTest() throws ApiException {
        List<Role> response = api.getRoles();

        // TODO: test validations
    }
    /**
     * Update a role. The role will be created if it doesn&#39;t exist.
     *
     * Update a role. The role will be created if it doesn&#39;t exist.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRoleTest() throws ApiException {
        String roleId = null;
        Role body = null;
        api.updateRole(roleId, body);

        // TODO: test validations
    }
}
