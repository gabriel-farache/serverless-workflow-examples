/*
 * Move2Kube API
 * This is a documentation of the Move2Kube REST API. All API calls expect the `Authorization: Bearer <access-token>` HTTP header unless specified otherwise. The access token can be obtained in the same way as OAuth 2.0 using the token endpoint in the admin section. 
 *
 * The version of the OpenAPI document: v1.0.0
 * Contact: move2kube-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.parodos.move2kube.api;

import com.fasterxml.jackson.core.type.TypeReference;

import dev.parodos.move2kube.ApiException;
import dev.parodos.move2kube.ApiClient;
import dev.parodos.move2kube.Configuration;
import dev.parodos.move2kube.Pair;

import dev.parodos.move2kube.client.model.Error;
import java.io.File;
import dev.parodos.move2kube.client.model.StartTransformation202Response;
import dev.parodos.move2kube.client.model.StartTransformationRequest;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-17T12:21:13.081862Z[Etc/UTC]")
public class ProjectOutputsApi {


  private ApiClient apiClient;

  public ProjectOutputsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public ProjectOutputsApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Delete the output of the project.
   * Delete the output of the project.
   * @param workspaceId ID of the workspace the project is in. (required)
   * @param projectId ID of the project the output is in. (required)
   * @param outputId ID of the output to delete. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteProjectOutput(String workspaceId, String projectId, String outputId) throws ApiException {
    this.deleteProjectOutput(workspaceId, projectId, outputId, Collections.emptyMap());
  }


  /**
   * Delete the output of the project.
   * Delete the output of the project.
   * @param workspaceId ID of the workspace the project is in. (required)
   * @param projectId ID of the project the output is in. (required)
   * @param outputId ID of the output to delete. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteProjectOutput(String workspaceId, String projectId, String outputId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'workspaceId' is set
    if (workspaceId == null) {
      throw new ApiException(400, "Missing the required parameter 'workspaceId' when calling deleteProjectOutput");
    }
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling deleteProjectOutput");
    }
    
    // verify the required parameter 'outputId' is set
    if (outputId == null) {
      throw new ApiException(400, "Missing the required parameter 'outputId' when calling deleteProjectOutput");
    }
    
    // create path and map variables
    String localVarPath = "/workspaces/{workspace-id}/projects/{project-id}/outputs/{output-id}"
      .replaceAll("\\{" + "workspace-id" + "\\}", apiClient.escapeString(workspaceId.toString()))
      .replaceAll("\\{" + "project-id" + "\\}", apiClient.escapeString(projectId.toString()))
      .replaceAll("\\{" + "output-id" + "\\}", apiClient.escapeString(outputId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Get the output of the project with the given ID.
   * Get the output of the project with the given ID.
   * @param workspaceId ID of the workspace the project is in. (required)
   * @param projectId ID of the project the output is in. (required)
   * @param outputId ID of the output to get. (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getProjectOutput(String workspaceId, String projectId, String outputId) throws ApiException {
    return this.getProjectOutput(workspaceId, projectId, outputId, Collections.emptyMap());
  }


  /**
   * Get the output of the project with the given ID.
   * Get the output of the project with the given ID.
   * @param workspaceId ID of the workspace the project is in. (required)
   * @param projectId ID of the project the output is in. (required)
   * @param outputId ID of the output to get. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getProjectOutput(String workspaceId, String projectId, String outputId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'workspaceId' is set
    if (workspaceId == null) {
      throw new ApiException(400, "Missing the required parameter 'workspaceId' when calling getProjectOutput");
    }
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling getProjectOutput");
    }
    
    // verify the required parameter 'outputId' is set
    if (outputId == null) {
      throw new ApiException(400, "Missing the required parameter 'outputId' when calling getProjectOutput");
    }
    
    // create path and map variables
    String localVarPath = "/workspaces/{workspace-id}/projects/{project-id}/outputs/{output-id}"
      .replaceAll("\\{" + "workspace-id" + "\\}", apiClient.escapeString(workspaceId.toString()))
      .replaceAll("\\{" + "project-id" + "\\}", apiClient.escapeString(projectId.toString()))
      .replaceAll("\\{" + "output-id" + "\\}", apiClient.escapeString(outputId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/octet-stream"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "bearerAuth" };

    TypeReference<File> localVarReturnType = new TypeReference<File>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Start transformation for this project. Planning must be completed before this.
   * Start transformation for this project. Planning must be completed before this.
   * @param workspaceId ID of the workspace the project is in. (required)
   * @param projectId ID of the project to start the transformation for. (required)
   * @param body A plan to use for the transformation. (Not required).  (optional)
   * @return StartTransformation202Response
   * @throws ApiException if fails to make API call
   */
  public StartTransformation202Response startTransformation(String workspaceId, String projectId, StartTransformationRequest body) throws ApiException {
    return this.startTransformation(workspaceId, projectId, body, Collections.emptyMap());
  }


  /**
   * Start transformation for this project. Planning must be completed before this.
   * Start transformation for this project. Planning must be completed before this.
   * @param workspaceId ID of the workspace the project is in. (required)
   * @param projectId ID of the project to start the transformation for. (required)
   * @param body A plan to use for the transformation. (Not required).  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return StartTransformation202Response
   * @throws ApiException if fails to make API call
   */
  public StartTransformation202Response startTransformation(String workspaceId, String projectId, StartTransformationRequest body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'workspaceId' is set
    if (workspaceId == null) {
      throw new ApiException(400, "Missing the required parameter 'workspaceId' when calling startTransformation");
    }
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling startTransformation");
    }
    
    // create path and map variables
    String localVarPath = "/workspaces/{workspace-id}/projects/{project-id}/outputs"
      .replaceAll("\\{" + "workspace-id" + "\\}", apiClient.escapeString(workspaceId.toString()))
      .replaceAll("\\{" + "project-id" + "\\}", apiClient.escapeString(projectId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "bearerAuth" };

    TypeReference<StartTransformation202Response> localVarReturnType = new TypeReference<StartTransformation202Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
