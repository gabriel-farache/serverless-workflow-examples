/*
 * Move2Kube API
 * This is a documentation of the Move2Kube REST API. All API calls expect the `Authorization: Bearer <access-token>` HTTP header unless specified otherwise. The access token can be obtained in the same way as OAuth 2.0 using the token endpoint in the admin section. 
 *
 * The version of the OpenAPI document: v1.0.0
 * Contact: move2kube-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.parodos.move2kube.api;

import com.fasterxml.jackson.core.type.TypeReference;

import dev.parodos.move2kube.ApiException;
import dev.parodos.move2kube.ApiClient;
import dev.parodos.move2kube.Configuration;
import dev.parodos.move2kube.Pair;

import dev.parodos.move2kube.client.model.CreateProject201Response;
import dev.parodos.move2kube.client.model.Error;
import dev.parodos.move2kube.client.model.Project;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-17T12:21:13.081862Z[Etc/UTC]")
public class ProjectsApi {


  private ApiClient apiClient;

  public ProjectsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public ProjectsApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Create a new project in this workspace. The ID will be generated by the server.
   * Create a new project in this workspace. The ID will be generated by the server.
   * @param workspaceId ID of the workspace to create the project in. (required)
   * @param body The metadata of the project. Leave the ID blank, it will be generated.  (required)
   * @return CreateProject201Response
   * @throws ApiException if fails to make API call
   */
  public CreateProject201Response createProject(String workspaceId, Project body) throws ApiException {
    return this.createProject(workspaceId, body, Collections.emptyMap());
  }


  /**
   * Create a new project in this workspace. The ID will be generated by the server.
   * Create a new project in this workspace. The ID will be generated by the server.
   * @param workspaceId ID of the workspace to create the project in. (required)
   * @param body The metadata of the project. Leave the ID blank, it will be generated.  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return CreateProject201Response
   * @throws ApiException if fails to make API call
   */
  public CreateProject201Response createProject(String workspaceId, Project body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'workspaceId' is set
    if (workspaceId == null) {
      throw new ApiException(400, "Missing the required parameter 'workspaceId' when calling createProject");
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling createProject");
    }
    
    // create path and map variables
    String localVarPath = "/workspaces/{workspace-id}/projects"
      .replaceAll("\\{" + "workspace-id" + "\\}", apiClient.escapeString(workspaceId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "bearerAuth" };

    TypeReference<CreateProject201Response> localVarReturnType = new TypeReference<CreateProject201Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an existing workspace.
   * Delete an existing workspace.
   * @param workspaceId ID of the workspace the project is in. (required)
   * @param projectId ID of the project to delete. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteProject(String workspaceId, String projectId) throws ApiException {
    this.deleteProject(workspaceId, projectId, Collections.emptyMap());
  }


  /**
   * Delete an existing workspace.
   * Delete an existing workspace.
   * @param workspaceId ID of the workspace the project is in. (required)
   * @param projectId ID of the project to delete. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteProject(String workspaceId, String projectId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'workspaceId' is set
    if (workspaceId == null) {
      throw new ApiException(400, "Missing the required parameter 'workspaceId' when calling deleteProject");
    }
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling deleteProject");
    }
    
    // create path and map variables
    String localVarPath = "/workspaces/{workspace-id}/projects/{project-id}"
      .replaceAll("\\{" + "workspace-id" + "\\}", apiClient.escapeString(workspaceId.toString()))
      .replaceAll("\\{" + "project-id" + "\\}", apiClient.escapeString(projectId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Get the project with the given ID.
   * Get the project with the given ID.
   * @param workspaceId ID of the workspace the project is in. (required)
   * @param projectId ID of the project to get. (required)
   * @return Project
   * @throws ApiException if fails to make API call
   */
  public Project getProject(String workspaceId, String projectId) throws ApiException {
    return this.getProject(workspaceId, projectId, Collections.emptyMap());
  }


  /**
   * Get the project with the given ID.
   * Get the project with the given ID.
   * @param workspaceId ID of the workspace the project is in. (required)
   * @param projectId ID of the project to get. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Project
   * @throws ApiException if fails to make API call
   */
  public Project getProject(String workspaceId, String projectId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'workspaceId' is set
    if (workspaceId == null) {
      throw new ApiException(400, "Missing the required parameter 'workspaceId' when calling getProject");
    }
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling getProject");
    }
    
    // create path and map variables
    String localVarPath = "/workspaces/{workspace-id}/projects/{project-id}"
      .replaceAll("\\{" + "workspace-id" + "\\}", apiClient.escapeString(workspaceId.toString()))
      .replaceAll("\\{" + "project-id" + "\\}", apiClient.escapeString(projectId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "bearerAuth" };

    TypeReference<Project> localVarReturnType = new TypeReference<Project>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all the projects you have access to in this workspace.
   * Get all the projects you have access to in this workspace.
   * @param workspaceId ID of the workspace to get the projects from. (required)
   * @return List&lt;Project&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Project> getProjects(String workspaceId) throws ApiException {
    return this.getProjects(workspaceId, Collections.emptyMap());
  }


  /**
   * Get all the projects you have access to in this workspace.
   * Get all the projects you have access to in this workspace.
   * @param workspaceId ID of the workspace to get the projects from. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Project&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Project> getProjects(String workspaceId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'workspaceId' is set
    if (workspaceId == null) {
      throw new ApiException(400, "Missing the required parameter 'workspaceId' when calling getProjects");
    }
    
    // create path and map variables
    String localVarPath = "/workspaces/{workspace-id}/projects"
      .replaceAll("\\{" + "workspace-id" + "\\}", apiClient.escapeString(workspaceId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "bearerAuth" };

    TypeReference<List<Project>> localVarReturnType = new TypeReference<List<Project>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update a project. The project will be created if it doesn&#39;t exist.
   * Update a project. The project will be created if it doesn&#39;t exist.
   * @param workspaceId ID of the workspace the project is in. (required)
   * @param projectId ID of the project to update. (required)
   * @param body The metadata of the project. Leave the ID blank.  (required)
   * @throws ApiException if fails to make API call
   */
  public void updateProject(String workspaceId, String projectId, Project body) throws ApiException {
    this.updateProject(workspaceId, projectId, body, Collections.emptyMap());
  }


  /**
   * Update a project. The project will be created if it doesn&#39;t exist.
   * Update a project. The project will be created if it doesn&#39;t exist.
   * @param workspaceId ID of the workspace the project is in. (required)
   * @param projectId ID of the project to update. (required)
   * @param body The metadata of the project. Leave the ID blank.  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void updateProject(String workspaceId, String projectId, Project body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'workspaceId' is set
    if (workspaceId == null) {
      throw new ApiException(400, "Missing the required parameter 'workspaceId' when calling updateProject");
    }
    
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(400, "Missing the required parameter 'projectId' when calling updateProject");
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling updateProject");
    }
    
    // create path and map variables
    String localVarPath = "/workspaces/{workspace-id}/projects/{project-id}"
      .replaceAll("\\{" + "workspace-id" + "\\}", apiClient.escapeString(workspaceId.toString()))
      .replaceAll("\\{" + "project-id" + "\\}", apiClient.escapeString(projectId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

}
