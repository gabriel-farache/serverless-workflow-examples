/*
 * Move2Kube API
 * This is a documentation of the Move2Kube REST API. All API calls expect the `Authorization: Bearer <access-token>` HTTP header unless specified otherwise. The access token can be obtained in the same way as OAuth 2.0 using the token endpoint in the admin section. 
 *
 * The version of the OpenAPI document: v1.0.0
 * Contact: move2kube-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.parodos.move2kube.api;

import com.fasterxml.jackson.core.type.TypeReference;

import dev.parodos.move2kube.ApiException;
import dev.parodos.move2kube.ApiClient;
import dev.parodos.move2kube.Configuration;
import dev.parodos.move2kube.Pair;

import dev.parodos.move2kube.client.model.CreateWorkspaceInput201Response;
import dev.parodos.move2kube.client.model.Error;
import java.io.File;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-17T12:21:13.081862Z[Etc/UTC]")
public class WorkspaceInputsApi {


  private ApiClient apiClient;

  public WorkspaceInputsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public WorkspaceInputsApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Create a new input for this workspace. All the projects in this workspace will be able to use it. The ID will be generated by the server.
   * Create a new input for this workspace. All the projects in this workspace will be able to use it. The ID will be generated by the server.
   * @param workspaceId ID of the workspace to create the input in. (required)
   * @param type The type of the input. (optional)
   * @param description A description for the input. (optional)
   * @param _file The actual content of the input file. (optional)
   * @return CreateWorkspaceInput201Response
   * @throws ApiException if fails to make API call
   */
  public CreateWorkspaceInput201Response createWorkspaceInput(String workspaceId, String type, String description, File _file) throws ApiException {
    return this.createWorkspaceInput(workspaceId, type, description, _file, Collections.emptyMap());
  }


  /**
   * Create a new input for this workspace. All the projects in this workspace will be able to use it. The ID will be generated by the server.
   * Create a new input for this workspace. All the projects in this workspace will be able to use it. The ID will be generated by the server.
   * @param workspaceId ID of the workspace to create the input in. (required)
   * @param type The type of the input. (optional)
   * @param description A description for the input. (optional)
   * @param _file The actual content of the input file. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return CreateWorkspaceInput201Response
   * @throws ApiException if fails to make API call
   */
  public CreateWorkspaceInput201Response createWorkspaceInput(String workspaceId, String type, String description, File _file, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'workspaceId' is set
    if (workspaceId == null) {
      throw new ApiException(400, "Missing the required parameter 'workspaceId' when calling createWorkspaceInput");
    }
    
    // create path and map variables
    String localVarPath = "/workspaces/{workspace-id}/inputs"
      .replaceAll("\\{" + "workspace-id" + "\\}", apiClient.escapeString(workspaceId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    if (type != null)
      localVarFormParams.put("type", type);
if (description != null)
      localVarFormParams.put("description", description);
if (_file != null)
      localVarFormParams.put("file", _file);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "multipart/form-data"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "bearerAuth" };

    TypeReference<CreateWorkspaceInput201Response> localVarReturnType = new TypeReference<CreateWorkspaceInput201Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete the input of the project.
   * Delete the input of the project.
   * @param workspaceId ID of the workspace the project is in. (required)
   * @param inputId ID of the input to delete. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteWorkspaceInput(String workspaceId, String inputId) throws ApiException {
    this.deleteWorkspaceInput(workspaceId, inputId, Collections.emptyMap());
  }


  /**
   * Delete the input of the project.
   * Delete the input of the project.
   * @param workspaceId ID of the workspace the project is in. (required)
   * @param inputId ID of the input to delete. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteWorkspaceInput(String workspaceId, String inputId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'workspaceId' is set
    if (workspaceId == null) {
      throw new ApiException(400, "Missing the required parameter 'workspaceId' when calling deleteWorkspaceInput");
    }
    
    // verify the required parameter 'inputId' is set
    if (inputId == null) {
      throw new ApiException(400, "Missing the required parameter 'inputId' when calling deleteWorkspaceInput");
    }
    
    // create path and map variables
    String localVarPath = "/workspaces/{workspace-id}/inputs/{input-id}"
      .replaceAll("\\{" + "workspace-id" + "\\}", apiClient.escapeString(workspaceId.toString()))
      .replaceAll("\\{" + "input-id" + "\\}", apiClient.escapeString(inputId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Get the input of the project with the given ID.
   * Get the input of the project with the given ID.
   * @param workspaceId ID of the workspace the project is in. (required)
   * @param inputId ID of the input to get. (required)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getWorkspaceInput(String workspaceId, String inputId) throws ApiException {
    return this.getWorkspaceInput(workspaceId, inputId, Collections.emptyMap());
  }


  /**
   * Get the input of the project with the given ID.
   * Get the input of the project with the given ID.
   * @param workspaceId ID of the workspace the project is in. (required)
   * @param inputId ID of the input to get. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File getWorkspaceInput(String workspaceId, String inputId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'workspaceId' is set
    if (workspaceId == null) {
      throw new ApiException(400, "Missing the required parameter 'workspaceId' when calling getWorkspaceInput");
    }
    
    // verify the required parameter 'inputId' is set
    if (inputId == null) {
      throw new ApiException(400, "Missing the required parameter 'inputId' when calling getWorkspaceInput");
    }
    
    // create path and map variables
    String localVarPath = "/workspaces/{workspace-id}/inputs/{input-id}"
      .replaceAll("\\{" + "workspace-id" + "\\}", apiClient.escapeString(workspaceId.toString()))
      .replaceAll("\\{" + "input-id" + "\\}", apiClient.escapeString(inputId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/octet-stream"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "bearerAuth" };

    TypeReference<File> localVarReturnType = new TypeReference<File>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
