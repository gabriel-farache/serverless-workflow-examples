/*
 * Move2Kube API
 * This is a documentation of the Move2Kube REST API. All API calls expect the `Authorization: Bearer <access-token>` HTTP header unless specified otherwise. The access token can be obtained in the same way as OAuth 2.0 using the token endpoint in the admin section. 
 *
 * The version of the OpenAPI document: v1.0.0
 * Contact: move2kube-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.parodos.move2kube.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * ProjectStatus
 */
@JsonPropertyOrder({
  ProjectStatus.JSON_PROPERTY_PLAN,
  ProjectStatus.JSON_PROPERTY_PLAN_ERROR,
  ProjectStatus.JSON_PROPERTY_PLANNING,
  ProjectStatus.JSON_PROPERTY_REFERENCE,
  ProjectStatus.JSON_PROPERTY_STALE_PLAN,
  ProjectStatus.JSON_PROPERTY_SOURCES,
  ProjectStatus.JSON_PROPERTY_OUTPUTS
})
@JsonTypeName("Project_status")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-17T12:21:13.081862Z[Etc/UTC]")
public class ProjectStatus {
  public static final String JSON_PROPERTY_PLAN = "plan";
  private Boolean plan;

  public static final String JSON_PROPERTY_PLAN_ERROR = "plan_error";
  private Boolean planError;

  public static final String JSON_PROPERTY_PLANNING = "planning";
  private Boolean planning;

  public static final String JSON_PROPERTY_REFERENCE = "reference";
  private Boolean reference;

  public static final String JSON_PROPERTY_STALE_PLAN = "stale_plan";
  private Boolean stalePlan;

  public static final String JSON_PROPERTY_SOURCES = "sources";
  private Boolean sources;

  public static final String JSON_PROPERTY_OUTPUTS = "outputs";
  private Boolean outputs;

  public ProjectStatus() {
  }

  public ProjectStatus plan(Boolean plan) {
    
    this.plan = plan;
    return this;
  }

   /**
   * Get plan
   * @return plan
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPlan() {
    return plan;
  }


  @JsonProperty(JSON_PROPERTY_PLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlan(Boolean plan) {
    this.plan = plan;
  }


  public ProjectStatus planError(Boolean planError) {
    
    this.planError = planError;
    return this;
  }

   /**
   * Get planError
   * @return planError
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLAN_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPlanError() {
    return planError;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanError(Boolean planError) {
    this.planError = planError;
  }


  public ProjectStatus planning(Boolean planning) {
    
    this.planning = planning;
    return this;
  }

   /**
   * Get planning
   * @return planning
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLANNING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPlanning() {
    return planning;
  }


  @JsonProperty(JSON_PROPERTY_PLANNING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanning(Boolean planning) {
    this.planning = planning;
  }


  public ProjectStatus reference(Boolean reference) {
    
    this.reference = reference;
    return this;
  }

   /**
   * Get reference
   * @return reference
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getReference() {
    return reference;
  }


  @JsonProperty(JSON_PROPERTY_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReference(Boolean reference) {
    this.reference = reference;
  }


  public ProjectStatus stalePlan(Boolean stalePlan) {
    
    this.stalePlan = stalePlan;
    return this;
  }

   /**
   * Get stalePlan
   * @return stalePlan
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STALE_PLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getStalePlan() {
    return stalePlan;
  }


  @JsonProperty(JSON_PROPERTY_STALE_PLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStalePlan(Boolean stalePlan) {
    this.stalePlan = stalePlan;
  }


  public ProjectStatus sources(Boolean sources) {
    
    this.sources = sources;
    return this;
  }

   /**
   * Get sources
   * @return sources
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSources() {
    return sources;
  }


  @JsonProperty(JSON_PROPERTY_SOURCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSources(Boolean sources) {
    this.sources = sources;
  }


  public ProjectStatus outputs(Boolean outputs) {
    
    this.outputs = outputs;
    return this;
  }

   /**
   * Get outputs
   * @return outputs
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTPUTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getOutputs() {
    return outputs;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputs(Boolean outputs) {
    this.outputs = outputs;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectStatus projectStatus = (ProjectStatus) o;
    return Objects.equals(this.plan, projectStatus.plan) &&
        Objects.equals(this.planError, projectStatus.planError) &&
        Objects.equals(this.planning, projectStatus.planning) &&
        Objects.equals(this.reference, projectStatus.reference) &&
        Objects.equals(this.stalePlan, projectStatus.stalePlan) &&
        Objects.equals(this.sources, projectStatus.sources) &&
        Objects.equals(this.outputs, projectStatus.outputs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(plan, planError, planning, reference, stalePlan, sources, outputs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectStatus {\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    planError: ").append(toIndentedString(planError)).append("\n");
    sb.append("    planning: ").append(toIndentedString(planning)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    stalePlan: ").append(toIndentedString(stalePlan)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `plan` to the URL query string
    if (getPlan() != null) {
      try {
        joiner.add(String.format("%splan%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPlan()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `plan_error` to the URL query string
    if (getPlanError() != null) {
      try {
        joiner.add(String.format("%splan_error%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPlanError()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `planning` to the URL query string
    if (getPlanning() != null) {
      try {
        joiner.add(String.format("%splanning%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPlanning()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `reference` to the URL query string
    if (getReference() != null) {
      try {
        joiner.add(String.format("%sreference%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getReference()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `stale_plan` to the URL query string
    if (getStalePlan() != null) {
      try {
        joiner.add(String.format("%sstale_plan%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStalePlan()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `sources` to the URL query string
    if (getSources() != null) {
      try {
        joiner.add(String.format("%ssources%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSources()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `outputs` to the URL query string
    if (getOutputs() != null) {
      try {
        joiner.add(String.format("%soutputs%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOutputs()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

