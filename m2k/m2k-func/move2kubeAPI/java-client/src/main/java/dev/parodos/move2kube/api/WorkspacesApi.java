/*
 * Move2Kube API
 * This is a documentation of the Move2Kube REST API. All API calls expect the `Authorization: Bearer <access-token>` HTTP header unless specified otherwise. The access token can be obtained in the same way as OAuth 2.0 using the token endpoint in the admin section. 
 *
 * The version of the OpenAPI document: v1.0.0
 * Contact: move2kube-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.parodos.move2kube.api;

import com.fasterxml.jackson.core.type.TypeReference;

import dev.parodos.move2kube.ApiException;
import dev.parodos.move2kube.ApiClient;
import dev.parodos.move2kube.Configuration;
import dev.parodos.move2kube.Pair;

import dev.parodos.move2kube.client.model.CreateWorkspace201Response;
import dev.parodos.move2kube.client.model.Error;
import dev.parodos.move2kube.client.model.Workspace;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-17T12:21:13.081862Z[Etc/UTC]")
public class WorkspacesApi {


  private ApiClient apiClient;

  public WorkspacesApi() {
    this(Configuration.getDefaultApiClient());
  }

  public WorkspacesApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Create a new workspace. The ID will be generated by the server.
   * Create a new workspace. The ID will be generated by the server.
   * @param body The metadata of the workspace. Leave the ID blank, it will be generated. Leave the projects blank, projects are managed through a different set of endpoints.  (required)
   * @return CreateWorkspace201Response
   * @throws ApiException if fails to make API call
   */
  public CreateWorkspace201Response createWorkspace(Workspace body) throws ApiException {
    return this.createWorkspace(body, Collections.emptyMap());
  }


  /**
   * Create a new workspace. The ID will be generated by the server.
   * Create a new workspace. The ID will be generated by the server.
   * @param body The metadata of the workspace. Leave the ID blank, it will be generated. Leave the projects blank, projects are managed through a different set of endpoints.  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return CreateWorkspace201Response
   * @throws ApiException if fails to make API call
   */
  public CreateWorkspace201Response createWorkspace(Workspace body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling createWorkspace");
    }
    
    // create path and map variables
    String localVarPath = "/workspaces";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "bearerAuth" };

    TypeReference<CreateWorkspace201Response> localVarReturnType = new TypeReference<CreateWorkspace201Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an existing workspace.
   * Delete an existing workspace.
   * @param workspaceId ID of the workspace to delete. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteWorkspace(String workspaceId) throws ApiException {
    this.deleteWorkspace(workspaceId, Collections.emptyMap());
  }


  /**
   * Delete an existing workspace.
   * Delete an existing workspace.
   * @param workspaceId ID of the workspace to delete. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteWorkspace(String workspaceId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'workspaceId' is set
    if (workspaceId == null) {
      throw new ApiException(400, "Missing the required parameter 'workspaceId' when calling deleteWorkspace");
    }
    
    // create path and map variables
    String localVarPath = "/workspaces/{workspace-id}"
      .replaceAll("\\{" + "workspace-id" + "\\}", apiClient.escapeString(workspaceId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Get the workspace with the given ID.
   * Get the workspace with the given ID.
   * @param workspaceId ID of the workspace to get. (required)
   * @return Workspace
   * @throws ApiException if fails to make API call
   */
  public Workspace getWorkspace(String workspaceId) throws ApiException {
    return this.getWorkspace(workspaceId, Collections.emptyMap());
  }


  /**
   * Get the workspace with the given ID.
   * Get the workspace with the given ID.
   * @param workspaceId ID of the workspace to get. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Workspace
   * @throws ApiException if fails to make API call
   */
  public Workspace getWorkspace(String workspaceId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'workspaceId' is set
    if (workspaceId == null) {
      throw new ApiException(400, "Missing the required parameter 'workspaceId' when calling getWorkspace");
    }
    
    // create path and map variables
    String localVarPath = "/workspaces/{workspace-id}"
      .replaceAll("\\{" + "workspace-id" + "\\}", apiClient.escapeString(workspaceId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "bearerAuth" };

    TypeReference<Workspace> localVarReturnType = new TypeReference<Workspace>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all the workspaces you have access to.
   * Get all the workspaces you have access to.
   * @return List&lt;Workspace&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Workspace> getWorkspaces() throws ApiException {
    return this.getWorkspaces(Collections.emptyMap());
  }


  /**
   * Get all the workspaces you have access to.
   * Get all the workspaces you have access to.
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Workspace&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Workspace> getWorkspaces(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/workspaces";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "bearerAuth" };

    TypeReference<List<Workspace>> localVarReturnType = new TypeReference<List<Workspace>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update a workspace. The workspace will be created if it doesn&#39;t exist.
   * Update a workspace. The workspace will be created if it doesn&#39;t exist.
   * @param workspaceId ID of the workspace to update. (required)
   * @param body The metadata of the workspace. Leave the ID blank, it will be generated. Leave the projects blank, projects are managed through a different set of endpoints.  (required)
   * @throws ApiException if fails to make API call
   */
  public void updateWorkspace(String workspaceId, Workspace body) throws ApiException {
    this.updateWorkspace(workspaceId, body, Collections.emptyMap());
  }


  /**
   * Update a workspace. The workspace will be created if it doesn&#39;t exist.
   * Update a workspace. The workspace will be created if it doesn&#39;t exist.
   * @param workspaceId ID of the workspace to update. (required)
   * @param body The metadata of the workspace. Leave the ID blank, it will be generated. Leave the projects blank, projects are managed through a different set of endpoints.  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void updateWorkspace(String workspaceId, Workspace body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'workspaceId' is set
    if (workspaceId == null) {
      throw new ApiException(400, "Missing the required parameter 'workspaceId' when calling updateWorkspace");
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling updateWorkspace");
    }
    
    // create path and map variables
    String localVarPath = "/workspaces/{workspace-id}"
      .replaceAll("\\{" + "workspace-id" + "\\}", apiClient.escapeString(workspaceId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

}
